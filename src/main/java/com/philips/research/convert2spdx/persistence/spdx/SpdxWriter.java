package com.philips.research.convert2spdx.persistence.spdx;

import com.philips.research.convert2spdx.core.BillOfMaterialsStore;
import com.philips.research.convert2spdx.core.bom.BillOfMaterials;
import com.philips.research.convert2spdx.core.bom.Package;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class SpdxWriter implements BillOfMaterialsStore {
    private final Map<Object, SpdxRef> identifiers = new HashMap<>();

    private int nextId = 1;

    public BillOfMaterials read(File file) {
        return null;
    }

    public void write(File file, BillOfMaterials bom) {
        String documentId = UUID.randomUUID().toString();
        try (final var doc = new TagValueDocument(new FileOutputStream(file))) {
            writeDocumentInformation(doc, documentId);
            for (Package pkg : bom.getDependencies()) {
                writePackage(doc, pkg);
            }
            //TODO Add non-SPDX license information
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void writeDocumentInformation(TagValueDocument doc, String documentId) throws IOException {
        doc.addValue("SPDXVersion", "SPDX-2.2");
        doc.addValue("DataLicense", SpdxLicense.of("CC0-1.0"));
        //TODO Document reference?
        doc.addValue("SPDXID", new SpdxRef("DOCUMENT"));
        //TODO Document name?
        doc.addValue("DocumentName", "???");
        doc.addValue("DocumentNamespace", URI.create("https://spdx.org/spdxdocs/" + documentId));
        doc.addComment("(No external document references)");

        doc.addEmptyLine();
        doc.addComment("Creation information");
        //TODO Get tool name and version from Maven info
        doc.addValue("Creator", SpdxParty.organization("Koninklijke Philips N.V."));
        doc.addValue("Creator", SpdxParty.tool("convert2spdx", "0.1"));
        doc.addValue("Created", timestamp(Instant.now()));
        doc.addText("CreatorComment", "This SPDX file was automatically generated by a tool.");
        doc.addText("DocumentComment", "This document was automatically generated.");
        doc.addText("LicenseListVersion", SpdxLicense.VERSION);
        doc.addEmptyLine();
    }

    private void writePackage(TagValueDocument doc, Package pkg) throws IOException {
        doc.addComment("Start of package " + pkg.getName() + " version " + pkg.getVersion());
        doc.addValue("PackageName", pkg.getName());
        doc.addValue("SPDXID", newIdentifier(pkg));
        doc.addValue("PackageVersion", pkg.getVersion());
        if (pkg.getFilename().isPresent()) {
            doc.addValue("PackageFileName", pkg.getFilename());
        }
        doc.addValue("PackageSupplier", SpdxParty.from(pkg.getSupplier()));
        doc.addValue("PackageOriginator", SpdxParty.from(pkg.getOriginator()));
        doc.addValue("PackageDownloadLocation", pkg.getLocation());
        doc.addValue("FilesAnalyzed", false);
        for (Map.Entry<String, String> entry : pkg.getHashes().entrySet()) {
            doc.addValue("PackageChecksum", entry.getKey() + ": " + entry.getValue());
        }
        doc.addValue("PackageHomePage", pkg.getHomePage());
        //TODO Need to also list the detected license per scanned file???
        doc.addValue("PackageLicenseConcluded", SpdxLicense.of(pkg.getLicense().orElse("")));
        doc.addValue("PackageLicenseDeclared", SpdxLicense.of(pkg.getDeclaredLicense().orElse("")));
        doc.addText("PackageCopyrightText", pkg.getCopyright());
        if (pkg.getSummary().isPresent()) {
            doc.addText("PackageSummary", pkg.getSummary());
        }
        if (pkg.getDescription().isPresent()) {
            doc.addText("PackageDescription", pkg.getDescription());
        }
        if (pkg.getAttribution().isPresent()) {
            doc.addText("packageAttributionText", pkg.getAttribution());
        }
    }

    private void writeLicense(TagValueDocument doc) throws IOException {
//       doc.addValue("LicenseID", );
//       doc.addText("ExtractedText", );
//       doc.addValue("LicenseName", );
//       doc.addValue("LicenseCrossReference", );
    }

    private String timestamp(Instant instant) {
        return DateTimeFormatter.ISO_DATE_TIME.format(instant);
    }

    private SpdxRef newIdentifier(Object object) {
        final var ref = new SpdxRef(Integer.toString(nextId));
        identifiers.put(object, ref);
        nextId++;
        return ref;
    }
}

